DROP TABLE IF EXISTS dishes CASCADE;
DROP TABLE IF EXISTS restaurants CASCADE;
DROP TABLE IF EXISTS votes CASCADE;
DROP TABLE IF EXISTS users CASCADE;
DROP TABLE IF EXISTS user_roles CASCADE;
DROP SEQUENCE IF EXISTS global_seq CASCADE;

CREATE SEQUENCE global_seq AS INTEGER START WITH 10000;

create table restaurants
(
    id   INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
    name varchar(255) not null
);
CREATE UNIQUE INDEX restaurants_name_unique_idx ON restaurants (name);

create table dishes
(
    id        INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
    rest_id  bigint       not null,
    price     integer      not null,
    dish_name varchar(255) not null,
    FOREIGN KEY (rest_id ) REFERENCES restaurants (id) ON DELETE CASCADE
);
CREATE UNIQUE INDEX dish_unique_idx ON dishes (rest_id, dish_name);


create table users
(
    id         INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
    name varchar(255) not null,
    email      varchar(255)                      not null,
    CONSTRAINT email_idx UNIQUE (email),
    enabled    boolean             default true  not null,
    password   varchar(255)                      not null,
    registered timestamp           default now() not null
);
CREATE UNIQUE INDEX users_unique_email_idx ON users (email);

create table user_roles
(
    user_id   INTEGER not null,
    role varchar(255),
    CONSTRAINT user_roles_idx UNIQUE (user_id, role),
    FOREIGN KEY (user_id) REFERENCES USERS (id) ON DELETE CASCADE
);
CREATE UNIQUE INDEX user_roles_unique_idx ON user_roles (user_id, role);

create table votes
(
    id           INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
    dateTime timestamp           DEFAULT now() not null,
    rating       integer                           not null,
    rest_id      bigint                            not null,
    user_id      bigint                            not null,
    FOREIGN KEY (rest_id) REFERENCES restaurants (id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
);

-- unfortunately HSQLdb doesn`t support functions in indexes.
CREATE UNIQUE INDEX votes_per_date_rest_idx ON votes (user_id, rest_id, dateTime);
